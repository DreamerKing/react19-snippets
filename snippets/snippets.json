{
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react';\n"],
    "description": "Import React"
  },



  "Import { useState }": {
    "prefix": "ims",
    "body": [
      "import { useState } from 'react';\n"
    ],
    "description": "Import { useState }"
  },

  "Import  { useState, useEffect }": {
    "prefix": "imse",
    "body": [
      "import { useState, useEffect } from 'react';\n"
    ],
    "description": "Import { useState, useEffect }"
  },


  "Stateless Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Stateless Function Component"
  },

  "Stateless Function Named Component": {
    "prefix": "sfnc",
    "body": [
      "export const $1 = ($2) => {",
      "\treturn ( $0 );",
      "}"
    ],
    "description": "Stateless Function Named Component"
  },

  "Function Syntax Component": {
    "prefix": "ffc",
    "body": [
      "function $1($2) {",
      "\treturn ( $0 );",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Function Syntax Component"
  },


  "useEffect": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, []);"
    ],
    "description": "useEffect Hook"
  },

  "useCallback": {
    "prefix": "ucb",
    "body": [
      "useCallback((val$1) => {",
      "\t$2",
      "}, []);"
    ],
    "description": "useCallback Hook"
  },

  "Functional setState": {
    "prefix": "ssf",
    "body": ["this.setState(prevState => {", "\treturn { $1: prevState.$1 };", "});"],
    "description": "Functional setState"
  },

  "Declare a new state variable using State Hook": {
    "prefix": "usf",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"],
    "description": "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
  },

  "Declare a new ref variable using Ref Hook": {
    "prefix": "usr",
    "body": ["const ${1} = useRef($2);"],
    "description": "Declare a new ref Variable using the Ref Hook."
  },



  "Context Provider": {
    "prefix": "cp",
    "body": [
      "export const $1 = React.createContext();",
      "",
      "const $1Provider = (props) => {",
      "\t// Initial Provider State",
      "\tconst state = {};",
      "",
      "\t// Reducer Function",
      "\tconst $2 = (state, action) => {",
      "\t\t",
      "\t};",
      "",
      "\treturn (",
      "\t\t<$1.Provider value={{state: state, $2}}>",
      "\t\t\t{props.children}",
      "\t\t</$1.Provider>",
      "\t);",
      "}",
      "",
      "export default $1Provider;"
    ],
    "description": "Context Provider"
  },


  "Function Syntax Component Inline": {
    "prefix": "effc",
    "body": [
      "export default function $1($2) {",
      "\treturn ( $0 );",
      "}"
    ],
    "description": "Function Syntax Component Inline"
  }
}
